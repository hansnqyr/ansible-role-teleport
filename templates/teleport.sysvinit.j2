#! /bin/sh
#
# Author: Adam Papai <wooh@wooh.hu>
#
# /etc/init.d/teleport
#
#
### BEGIN INIT INFO
# Provides: teleport
# Required-Start: $network $remote_fs
# Required-Stop: $network $remote_fs
# Should-Start: haveged auditd
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Description: Start the teleport daemon
### END INIT INFO

TELEPORT_BIN=/usr/local/bin/teleport
test -x $TELEPORT_BIN || exit 5

TELEPORT_PIDFILE={{ teleport_pidfile }}

TELEPORT_OPTS="start --config={{ teleport_config_path }}  {{ teleport_opts | default('') }}"

. /etc/rc.status

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status

function soft_stop () {
    echo -n "Shutting down the listening teleport daemon"
    killproc -p $TELEPORT_PIDFILE -TERM $TELEPORT_BIN
}

function force_stop () {
    echo -n "Shutting down teleport daemon *with all active connections*"
    trap '' TERM
    killall teleport 2>/dev/null
    trap - TERM
}

# First reset status of this service
rc_reset

case "$1" in
    start)
        echo -n "Starting teleport daemon"
        ## Start daemon with startproc(8). If this fails
        ## the echo return value is set appropriate.
        startproc -f -p $TELEPORT_PIDFILE $TELEPORT_BIN $TELEPORT_OPTS

        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        # If we're shutting down, kill active teleport connections so they're not
        # left hanging.
        runlevel=$(set -- $(runlevel); eval "echo \$$#")
        if [ "x$runlevel" = x0 -o "x$runlevel" = x6 ] ; then
            force_stop
        else
            soft_stop
        fi

        # Remember status and be verbose
        rc_status -v
        ;;
    soft-stop)
        ## Stop the listener daemon process with killproc(8) and if this
        ## fails set echo the echo return value.
        soft_stop

        # Remember status and be verbose
        rc_status -v
        ;;
    force-stop)
        ## stop all running teleport
        force_stop

        # Remember status and be verbose
        rc_status -v
        ;;
    try-restart)
        ## Stop the service and if this succeeds (i.e. the
        ## service was running before), start it again.
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service without closing live connections
        ## and start it again regardless of whether it was
        ## running or not
        $0 soft-stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    force-reload|reload)
        ## Signal the daemon to reload its config. Most daemons
        ## do this on signal 1 (SIGHUP).
        echo -n "Reload service teleport"

        killproc -p $TELEPORT_PIDFILE -HUP $TELEPORT_BIN

        rc_status -v

        ;;
    status)
        echo -n "Checking for service teleport "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        checkproc -p $TELEPORT_PIDFILE $TELEPORT_BIN

        rc_status -v
        ;;
    *)
        echo "Usage: $0 {start|stop|soft-stop|force-stop|status|try-restart|restart|force-reload|reload}"
        exit 1
        ;;
esac
rc_exit
